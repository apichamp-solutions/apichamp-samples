specification: 1.0

operations:

  #####################################
  #### Endpoint: GET /events
  #####################################
  'get /events':
    fulfillments:
      # Get data from a database
      - name: getEvents
        type: READ
        datasource: mydatabase
        instructions:
          # Query when both filters are set
          - if: PARAM(startdate) != NULL() && PARAM(enddate) != NULL()
            query: Select e.*, count(a.name) as attendees from events as e LEFT JOIN event_attendees as a ON (e.id = a.event_id) WHERE e.startdate > :[PARAM(startdate)] AND e.enddate < :[PARAM(enddate)] GROUP BY e.id
          # Query if only startdate is set
          - if: PARAM(startdate) != NULL()
            query: Select e.*, count(a.name) as attendees from events as e LEFT JOIN event_attendees as a ON (e.id = a.event_id) WHERE e.startdate > :[PARAM(startdate)] GROUP BY e.id
          # Query if only enddate is set
          - if: PARAM(enddate) != NULL()
            query: Select e.*, count(a.name) as attendees from events as e LEFT JOIN event_attendees as a ON (e.id = a.event_id) WHERE e.enddate < :[PARAM(enddate)] GROUP BY e.id
          # Default Query if no filter is sent
          - query: Select e.*, count(a.name) as attendees from events as e LEFT JOIN event_attendees as a ON (e.id = a.event_id) GROUP BY e.id

    responses:
      - name: success
        default: true
        statuscode: 200
        schema:
          list: VALUE(getEvents, $)
          item:
            id: VALUE(@, $.id)
            title: VALUE(@, $.title)
            description: VALUE(@, $.desc)
            startdate: VALUE(@, $.startdate)
            enddate: VALUE(@, $.enddate)
            attendeesMax: VALUE(@, $.max_attendees)
            attendeesCount: VALUE(@, $.attendees)

  #####################################
  #### Endpoint: POST /events/attendees
  #####################################
  'post /events/attendees':
    fulfillments:

      ## Let´s get the max attendees allowed for this event
      - name: ff1
        type: READ
        datasource: mydatabase
        instructions:
          - query: Select max_attendees FROM events WHERE id = :[PARAM(eventid)]
        exceptions:
          # Throw exception if event does not exist
          - if: VALUE(ff1, $[0].max_attendees) == NULL()
            statuscode: 404
            message: Event not available

      ## Let´s check how often the even has been booked yet
      - name: ff2
        type: READ
        datasource: mydatabase
        instructions:
          - query: SELECT count(event_id) as attendees FROM event_attendees WHERE event_id = :[PARAM(eventid)] GROUP BY event_id
        exceptions:
          # Throw exception if event is already fully booked
          - if: VALUE(ff1, $[0].max_attendees) <= VALUE(ff2, $[0].attendees)
            statuscode: 409
            message: The event is already fully booked

      ## Save a new event attendee into the database
      - name: ff3
        type: UPDATE
        datasource: mydatabase
        instructions:
          - query: INSERT INTO event_attendees (event_id, name) VALUES (:[PARAM(eventid)], :[PARAM(name)])

    responses:
      - name: success
        default: true
        statuscode: 200

  #####################################
  #### Endpoint: GET /events/attendees
  #####################################
  'get /events/attendees':
    fulfillments:

      ## Let´s check how often the even has been booked yet
      - name: attendees
        type: READ
        datasource: mydatabase
        instructions:
          - query: SELECT name FROM event_attendees WHERE event_id = :[PARAM(eventid)]

    responses:
      - name: success
        default: true
        statuscode: 200
        schema:
          list: VALUE(attendees, $)
          item: VALUE(@, $.name)


#####################################
#### Configuration
#####################################
datasources:

  mydatabase:
    type: db
    url: jdbc:mariadb://mariadb-events:3306/sample-events
    user: root
    password: samplepwd

settings:
  debug: true